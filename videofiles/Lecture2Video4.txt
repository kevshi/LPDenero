1
00:00:02,076 --> 00:00:03,124
defining functions

2
00:00:04,024 --> 00:00:07,087
one of the most important things you
will do in this class

3
00:00:07,087 --> 00:00:12,136
before I talk about the details in
defining functions let's just take a

4
00:00:13,036 --> 00:00:13,108
moment

5
00:00:14,008 --> 00:00:17,026
to appreciate this moment so

6
00:00:17,026 --> 00:00:20,107
I told you on the first day that this
course is all about abstraction

7
00:00:21,007 --> 00:00:24,011
and today we're learning tools for
abstraction

8
00:00:24,047 --> 00:00:28,053
so assignment as a symbol means an
abstraction

9
00:00:29,007 --> 00:00:34,060
because you can buy names to values and
of course abstraction is

10
00:00:34,006 --> 00:00:37,013
the process up taking something complex

11
00:00:37,067 --> 00:00:40,116
giving it a name and treating it as a
whole

12
00:00:40,719 --> 00:00:45,590
without worrying about all its details
cell function definition is a more

13
00:00:45,059 --> 00:00:49,085
powerful means obstruction because
you'll be binding and name

14
00:00:49,085 --> 00:00:52,119
not just to a simple value but to a
whole

15
00:00:53,019 --> 00:00:56,118
expression our state or series of
statements

16
00:00:56,289 --> 00:01:00,090
something that truly is complex we give
it a name

17
00:01:00,009 --> 00:01:03,051
and treated as a whole without worrying
about its details

18
00:01:03,051 --> 00:01:06,660
sauce the functional to find that they
are very simple

19
00:01:07,119 --> 00:01:12,200
but they'll get more complicated sir the
way we define a function as a de

20
00:01:12,002 --> 00:01:12,086
statement

21
00:01:13,004 --> 00:01:16,263
which looks like this so this is a
generic version

22
00:01:16,299 --> 00:01:20,290
you're right death at the key word in
Python

23
00:01:20,029 --> 00:01:25,106
then you give the function name and you
list its formal parameters

24
00:01:26,006 --> 00:01:29,032
what you're going to be names there were
for

25
00:01:29,032 --> 00:01:33,071
to the argument values passed into the
function then

26
00:01:33,071 --> 00:01:36,090
a colon indent the next line

27
00:01:36,009 --> 00:01:40,908
and write the body if the function which
in its simplest cases just return

28
00:01:41,799 --> 00:01:44,820
and then a return expression gets a
value-added

29
00:01:45,009 --> 00:01:50,470
every time the function is called this
top-line

30
00:01:50,047 --> 00:01:53,486
between the deaf in the colon as call
the function signature

31
00:01:53,909 --> 00:01:57,600
and it's the most important role is that
it tells you

32
00:01:57,006 --> 00:02:01,555
how many arguments to function takes by
listing out the formal parameters

33
00:02:02,149 --> 00:02:07,020
Egypt which will get down to an argument
Valley well see exactly how that works

34
00:02:07,002 --> 00:02:07,060
in a minute

35
00:02:07,006 --> 00:02:10,145
and then the function body

36
00:02:10,739 --> 00:02:15,340
as everything that invented after the
first line and that defines

37
00:02:15,034 --> 00:02:20,093
what the function does so it's a and its
simplest form a sister return

38
00:02:20,093 --> 00:02:23,792
keyword followed by return expression
and expression

39
00:02:24,629 --> 00:02:28,654
describes a computational process which
will get evaluated every time the

40
00:02:28,879 --> 00:02:28,973
function is called

41
00:02:29,819 --> 00:02:33,410
okay so this deaf statement as a
two-line statement

42
00:02:33,041 --> 00:02:37,450
that defines a new function there's a
procedure

43
00:02:37,819 --> 00:02:43,050
for evaluating a test eight so his
execution procedure

44
00:02:43,005 --> 00:02:46,084
first thing is that every time there's a
death

45
00:02:46,129 --> 00:02:50,550
statement we create a new function and
that function

46
00:02:50,055 --> 00:02:53,324
has the signature given on the first lap

47
00:02:53,819 --> 00:02:58,610
the second thing is that we set the
party of that function

48
00:02:58,061 --> 00:03:01,080
which is echo that actually gets

49
00:03:01,629 --> 00:03:05,860
executed to be everything in that that
after the first lap

50
00:03:05,086 --> 00:03:08,745
finally we buy into the name

51
00:03:09,519 --> 00:03:12,613
given to the function to that new
function we created

52
00:03:13,459 --> 00:03:17,690
in the current freighter OVR environment

53
00:03:17,069 --> 00:03:20,101
remember those frames we'll be talking a
lot about those

54
00:03:21,001 --> 00:03:25,042
okay so here's the execution procedure
for de statements

55
00:03:25,042 --> 00:03:28,065
it's always the same the most important
piece

56
00:03:28,065 --> 00:03:32,764
is here number two says that was that
the body at the function to be

57
00:03:33,349 --> 00:03:33,900
everything

58
00:03:33,009 --> 00:03:36,658
dented after the first lap it does not
say

59
00:03:37,549 --> 00:03:41,650
that we actually execute that body so
that means

60
00:03:41,065 --> 00:03:45,214
when that deaf statement is executed for

61
00:03:45,799 --> 00:03:49,310
def square X return mall

62
00:03:49,031 --> 00:03:52,118
xx no load the playing actually happens

63
00:03:53,018 --> 00:03:56,019
so body just gets squirreled away

64
00:03:56,028 --> 00:04:00,237
as part of the function without actually
getting executed

65
00:04:00,489 --> 00:04:04,550
until the function is called squirreled
means

66
00:04:05,099 --> 00:04:10,152
to hide in a safe place it's also the
longest word in the English language

67
00:04:10,629 --> 00:04:12,030
that has only one

68
00:04:12,003 --> 00:04:16,078
sellable squirreled okay

69
00:04:16,078 --> 00:04:20,079
I like I like score I'm I'll

70
00:04:20,079 --> 00:04:23,080
okay now

71
00:04:23,008 --> 00:04:26,081
functions are only useful because we can
call

72
00:04:27,053 --> 00:04:31,722
so in addition to having an execution
procedure

73
00:04:32,199 --> 00:04:35,630
for deaf statement that creates the
function

74
00:04:35,063 --> 00:04:42,063
we also have a procedure for evaluating
a call expression

75
00:04:43,037 --> 00:04:46,116
that uses a user-defined function

76
00:04:46,449 --> 00:04:52,477
so here's a procedure for calling or
applying a user-defined function

77
00:04:52,729 --> 00:04:56,370
we at a local friend forming a new

78
00:04:56,037 --> 00:05:00,676
environment we buy and the functions
formal parameters

79
00:05:01,009 --> 00:05:04,034
to its arguments in that frame

80
00:05:04,259 --> 00:05:08,080
and finally we execute the body if the
function in that new

81
00:05:08,008 --> 00:05:12,009
environment let's see that in action

82
00:05:12,009 --> 00:05:15,068
before I confuse you anymore

83
00:05:15,068 --> 00:05:18,807
okay I'm operator important mall define
square

84
00:05:19,419 --> 00:05:24,425
acts to be returned mall X X and then
was great -2

85
00:05:24,479 --> 00:05:31,479
threat that statement and we have a call
expression uses are easy to find such

86
00:05:31,049 --> 00:05:35,788
the first thing that happens is that we
buy mall the built-in function

87
00:05:36,229 --> 00:05:42,020
then we define square which does all
three things I set

88
00:05:42,002 --> 00:05:45,027
it creates a new function where the
signature

89
00:05:45,027 --> 00:05:49,061
as the one that I wrote down in that
that statement

90
00:05:49,061 --> 00:05:52,150
its clothes away dub body of that
function

91
00:05:53,005 --> 00:05:56,099
as heart the function that we create

92
00:05:57,044 --> 00:06:00,136
soul we don't show it in the environment
diagram but it's there

93
00:06:01,036 --> 00:06:05,041
every time we call this function we're
going to execute that but

94
00:06:05,041 --> 00:06:09,640
we have multiplied anything together get
we haven't executed the body yet

95
00:06:10,009 --> 00:06:14,120
because the next like to execute will
finally be the call expression

96
00:06:14,012 --> 00:06:17,431
that actually uses this day but we did

97
00:06:17,539 --> 00:06:21,030
by the name square to the function that
we created

98
00:06:21,003 --> 00:06:24,019
in the current environment that's part
of what happens

99
00:06:24,019 --> 00:06:27,078
are you deaths square X

100
00:06:27,078 --> 00:06:31,617
okay finally gonna square -2

101
00:06:32,319 --> 00:06:37,560
so we evaluate square that is that
function whereby rethink this too is -2

102
00:06:37,056 --> 00:06:40,155
and then we apply this function

103
00:06:41,055 --> 00:06:44,087
true the argument value -2

104
00:06:44,087 --> 00:06:47,110
which means we follow the next
three-step procedure

105
00:06:48,001 --> 00:06:53,074
which is introduce a new frame

106
00:06:53,083 --> 00:06:57,165
find the formal parameters

107
00:06:58,065 --> 00:07:03,122
to the argument values in that new
friend

108
00:07:04,022 --> 00:07:08,191
and then execute the body if the
function

109
00:07:08,389 --> 00:07:12,680
in this new environment or explains -2

110
00:07:12,068 --> 00:07:15,207
square still means the square function
and mall

111
00:07:15,819 --> 00:07:19,490
still means multiple so the next line to
execute

112
00:07:19,049 --> 00:07:25,080
will be their return statement but this
function

113
00:07:25,008 --> 00:07:28,437
only execute that we find that the
return value

114
00:07:29,229 --> 00:07:33,690
the function is for which is what
happens when you multiply -2

115
00:07:33,069 --> 00:07:39,083
-2 and that woulda

116
00:07:39,083 --> 00:07:43,137
back to the slightest what exactly
happened there so here's a screenshot

117
00:07:44,037 --> 00:07:47,122
exactly what you just saw and I'm just
going to annotate some parts that are in

118
00:07:48,022 --> 00:07:48,030
part

119
00:07:49,002 --> 00:07:52,049
so we have a built-in function we have
user-defined functions

120
00:07:52,049 --> 00:07:55,136
look basically the same except for the
user-defined function we actually see

121
00:07:56,036 --> 00:07:57,715
the formal parameter

122
00:07:58,039 --> 00:08:02,400
X because we're going to need to use it
we have a local frame

123
00:08:02,004 --> 00:08:06,080
it was introduced in the first step of
the procedure above

124
00:08:07,016 --> 00:08:10,495
original a mother function is used to
label that local friend

125
00:08:10,639 --> 00:08:14,330
just so we can keep track this label is
a really that important

126
00:08:14,033 --> 00:08:17,242
what is important is that we have a
binding

127
00:08:17,539 --> 00:08:21,570
between the formal parameter X which is
the name with argument

128
00:08:21,849 --> 00:08:26,903
to that value the argument argument
values -2

129
00:08:27,389 --> 00:08:30,442
and then we all social return values and
these frames

130
00:08:30,919 --> 00:08:34,010
just so we can see what happened in the
process

131
00:08:34,001 --> 00:08:37,210
other valuating this function

132
00:08:37,219 --> 00:08:40,640
the return values for this is not the
standard

133
00:08:40,064 --> 00:08:43,162
name value binding this is just an
annotation and the environment diagrams

134
00:08:44,062 --> 00:08:48,087
that tells us what happed

135
00:08:48,087 --> 00:08:51,108
okay so that everything in the picture

136
00:08:52,008 --> 00:08:55,012
nap I mention that I function signature

137
00:08:55,012 --> 00:08:58,049
is important it's important because it
contains

138
00:08:58,049 --> 00:09:02,051
all the information needed to create
this local frame

139
00:09:02,051 --> 00:09:07,690
with bill right here so the signatures
between the death and the colon

140
00:09:08,149 --> 00:09:13,180
and that def statement first line: we
copy it over here when we create

141
00:09:13,018 --> 00:09:17,066
the function because the square here

142
00:09:17,066 --> 00:09:20,142
let's just name the local frame and the
X

143
00:09:21,042 --> 00:09:25,066
is the name that we bind to the argument
value of the function

144
00:09:25,066 --> 00:09:28,087
so that's why the function signatures
important as it tells us how to

145
00:09:28,087 --> 00:09:29,126
construct this frame

146
00:09:30,026 --> 00:09:35,725
every time we call square

147
00:09:35,959 --> 00:09:39,022
doctor we know they almost to the store

148
00:09:39,589 --> 00:09:44,690
for user-defined functions but there's
one more big piece

149
00:09:44,069 --> 00:09:47,113
and that's looking up names environments

150
00:09:48,013 --> 00:09:53,045
so every expression that we have value
eight is evaluated in the context of an

151
00:09:53,045 --> 00:09:54,099
environment

152
00:09:54,099 --> 00:09:58,101
why is that environment so the memory
keeps track

153
00:09:59,001 --> 00:10:02,068
%uh the correspondence between names and
values

154
00:10:02,068 --> 00:10:05,086
so the environment knows what makes me

155
00:10:05,086 --> 00:10:08,179
the current environment so far is really
just either one who

156
00:10:09,079 --> 00:10:13,125
global frame or now that we have
user-defined functions

157
00:10:14,025 --> 00:10:18,734
it could be a local frame followed by
the global free

158
00:10:18,959 --> 00:10:21,991
these are the only two possibilities so
far is

159
00:10:22,279 --> 00:10:25,760
one frame environment or to frame
environment

160
00:10:25,076 --> 00:10:28,161
nor does the work followed indicates
that there's an order here

161
00:10:29,061 --> 00:10:32,079
so here's the two most important things
I was a

162
00:10:32,079 --> 00:10:35,143
all day one and environment

163
00:10:36,043 --> 00:10:39,094
is a sequence a friend's iframe

164
00:10:39,094 --> 00:10:43,099
as a binding between names and values
one of the boxes and the environment

165
00:10:43,099 --> 00:10:44,128
actor

166
00:10:45,019 --> 00:10:48,540
and environment is a sequence of these
could be the local frame

167
00:10:48,054 --> 00:10:51,055
followed by the global for

168
00:10:51,055 --> 00:10:54,068
honey when evaluated

169
00:10:54,068 --> 00:10:57,847
evaluates to the value bound to that
name

170
00:10:58,459 --> 00:11:01,560
in the earliest frame the current
environment

171
00:11:01,056 --> 00:11:05,141
in which that name is packed

172
00:11:06,041 --> 00:11:09,048
so if an environment consists of a
sequence of frames

173
00:11:09,048 --> 00:11:13,049
and i wanna look up what does the name
mean in that environment

174
00:11:13,049 --> 00:11:16,130
I'll check each frame inter for example

175
00:11:17,003 --> 00:11:21,282
to look up some name in the body of the
square function we look for that name

176
00:11:21,579 --> 00:11:25,970
the local fame first events there we
know its value

177
00:11:25,097 --> 00:11:29,104
otherwise and we look for it and the
global for because that the next frame

178
00:11:30,004 --> 00:11:32,026
in the environment

179
00:11:32,026 --> 00:11:35,049
and building names like Max are in the
global fame to

180
00:11:35,049 --> 00:11:38,117
even if we don't show them we just don't
show them because I wanna keep our

181
00:11:39,017 --> 00:11:40,026
environment diagrams

182
00:11:40,026 --> 00:11:43,104
simple

183
00:11:44,004 --> 00:11:47,923
okay a startup type

184
00:11:47,959 --> 00:11:52,750
all the fine offers them thank you from

185
00:11:52,075 --> 00:11:55,106
operator import ball

186
00:11:56,006 --> 00:12:02,023
I can multiply style I'm now going to
define the square folks

187
00:12:02,023 --> 00:12:05,562
our team is Dex 10 you something else

188
00:12:05,769 --> 00:12:09,832
like square but turns the multiplication

189
00:12:10,399 --> 00:12:15,670
square and square

190
00:12:15,067 --> 00:12:19,416
what about to have used the name square

191
00:12:20,019 --> 00:12:25,760
so square for to some function called
square

192
00:12:25,076 --> 00:12:28,145
are squaring has a formal parameter
square

193
00:12:29,045 --> 00:12:34,132
what happens on tax credit score
something well it works just fine

194
00:12:35,032 --> 00:12:39,080
located at work let's take a look

195
00:12:39,008 --> 00:12:43,021
okay so here is out from operator
important role desk or square

196
00:12:43,093 --> 00:12:47,107
return mosque or square scored

197
00:12:48,007 --> 00:12:51,085
this world's the first lines okay

198
00:12:51,085 --> 00:12:55,180
a second line Dec finds a function
called square with formal parameter

199
00:12:56,008 --> 00:12:57,029
square

200
00:12:58,001 --> 00:13:02,093
nothing has been multiplied yet so no
disasters have occurred

201
00:13:02,093 --> 00:13:06,502
when I actually call the square function
I look up this function

202
00:13:07,339 --> 00:13:10,500
I name it the local frame square

203
00:13:10,005 --> 00:13:14,090
then I'm fine the argument -2

204
00:13:15,035 --> 00:13:19,056
to the name square which is the formal
parameter

205
00:13:19,056 --> 00:13:22,335
lead I return ball square square all
mall

206
00:13:22,839 --> 00:13:26,790
as mall the important thing is that
square

207
00:13:26,079 --> 00:13:30,188
in this environment means something
different

208
00:13:30,899 --> 00:13:35,060
than it used to now it means -2

209
00:13:35,006 --> 00:13:40,094
because the first thing I did was I look
up square here

210
00:13:40,094 --> 00:13:43,543
and I found it so I never actually look
up square

211
00:13:44,389 --> 00:13:45,070
and the global for

