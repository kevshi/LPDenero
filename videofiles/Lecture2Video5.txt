1
00:00:00,076 --> 00:00:04,150
print and not so as you know if I type
in expression

2
00:00:05,005 --> 00:00:10,051
into the interactive Python interpreter
it will then display the value of that

3
00:00:10,096 --> 00:00:14,105
expression it's also the case that a I
call print

4
00:00:14,969 --> 00:00:18,580
on the value -2 I'll see the same

5
00:00:18,058 --> 00:00:21,067
output but two different things have
happened here let's try to understand

6
00:00:22,048 --> 00:00:22,134
the difference

7
00:00:23,034 --> 00:00:26,813
okay so if I typed go bears

8
00:00:27,119 --> 00:00:30,202
I see go bears

9
00:00:30,949 --> 00:00:34,930
is the same exactly expression that I
taped it because this is a string

10
00:00:34,093 --> 00:00:34,742
literal

11
00:00:35,579 --> 00:00:40,030
and the reason the string value if on
the other hand I print

12
00:00:40,003 --> 00:00:45,075
gold bears at the almost the same thing
but no quotation marks

13
00:00:45,075 --> 00:00:49,077
so there must be a difference between
printing and just evaluating something

14
00:00:49,095 --> 00:00:52,182
we can see more of this difference

15
00:00:53,082 --> 00:00:58,001
when we look at the special value called
not non represents nothing

16
00:00:58,739 --> 00:01:02,140
if I just evaluated I see nothing

17
00:01:02,014 --> 00:01:05,253
if I printed out actually see not

18
00:01:05,379 --> 00:01:08,385
what's going on here is that

19
00:01:08,979 --> 00:01:14,060
Python has rules for automatically
displaying the value of any expression

20
00:01:14,006 --> 00:01:14,085
you type in

21
00:01:14,085 --> 00:01:18,090
automatically displays this negative to
wear this go bears nuns a special case

22
00:01:19,035 --> 00:01:20,944
for nothing gets displayed automatically

23
00:01:21,259 --> 00:01:25,345
but if I printed I can make it appear
okay

24
00:01:26,119 --> 00:01:31,400
what else can practice uptrend can print
multiple values separated by spaces

25
00:01:31,004 --> 00:01:34,007
and they can print not so i could print

26
00:01:34,007 --> 00:01:37,093
non and then on again here's an
interesting case

27
00:01:38,056 --> 00:01:43,153
what happens by nest calls to print
spend a moment

28
00:01:44,053 --> 00:01:47,107
thinking about what will happen and I'll
show you and three to

29
00:01:48,007 --> 00:01:51,306
one 129

30
00:01:51,369 --> 00:01:54,880
let's understand exactly what happened
there

31
00:01:54,088 --> 00:01:59,107
first what is not on line indicates that
nothing has been returned from some

32
00:02:00,007 --> 00:02:00,586
function

33
00:02:00,649 --> 00:02:04,210
the special value: $9 is just there to
represent nothing

34
00:02:04,021 --> 00:02:07,093
in Python it's called nine in other
languages that has other names

35
00:02:07,093 --> 00:02:10,172
a function that does not explicitly
return a value

36
00:02:11,072 --> 00:02:16,114
will in fact return none none is not
displayed by the interpreter

37
00:02:17,014 --> 00:02:21,076
automatically as the value have an
expression if I tried to define a

38
00:02:21,076 --> 00:02:21,082
function

39
00:02:22,036 --> 00:02:25,054
does not square X which just

40
00:02:25,054 --> 00:02:29,101
computes X times X but doesn't return it

41
00:02:30,001 --> 00:02:33,006
then I've created a function that
returns nothing

42
00:02:33,006 --> 00:02:37,935
because there's no return there so when
I call does not square

43
00:02:37,989 --> 00:02:41,690
4 I don't get sixteen back

44
00:02:41,069 --> 00:02:44,258
instead I get none however

45
00:02:44,879 --> 00:02:49,790
according to this third rule nine is not
displayed by the interpreter as the

46
00:02:49,079 --> 00:02:50,388
value of an expression

47
00:02:51,099 --> 00:02:55,860
so here's a college freshman if I
evaluated Ford Escape multiplied by four

48
00:02:55,086 --> 00:02:56,147
but it doesn't get returned

49
00:02:57,047 --> 00:03:00,139
what gets returned is not and non
doesn't appear at all

50
00:03:01,039 --> 00:03:04,073
okay next I could say sixteen

51
00:03:04,073 --> 00:03:08,126
equals does not square four what's gonna
happen here as well.

52
00:03:09,026 --> 00:03:12,058
compute the value at this college
brushin

53
00:03:12,058 --> 00:03:16,797
it will evaluate n9 which will be bound
to the name sixty

54
00:03:17,319 --> 00:03:20,480
so the name 16 is now bound to the value
not

55
00:03:20,048 --> 00:03:23,095
I just type in sixty nothing will be
displayed

56
00:03:23,095 --> 00:03:26,994
if I type in 16 plus four I will not get
twenty

57
00:03:27,849 --> 00:03:31,000
I will get type error it says

58
00:03:31,000 --> 00:03:34,073
unsupported operand types for plus none
type

59
00:03:34,073 --> 00:03:38,192
and what does that mean well this place
is the same as that place

60
00:03:38,849 --> 00:03:41,877
and what it's saying is that I tried to
add together

61
00:03:42,129 --> 00:03:45,510
a nun and in that stands for integer

62
00:03:45,051 --> 00:03:48,090
for is an integer for this kind of error

63
00:03:48,549 --> 00:03:52,080
might arise when we've tried to add
something to nothing

64
00:03:52,008 --> 00:03:56,087
but you cannot do okay

65
00:03:56,087 --> 00:03:59,816
back to print well it turns out there
are two kinds of functions

66
00:04:00,599 --> 00:04:03,677
pure functions the just returned values
and non pure

67
00:04:04,379 --> 00:04:09,400
functions that have side effects appear
function is something like

68
00:04:09,004 --> 00:04:12,082
aP's which computes the absolute value
of its argument

69
00:04:13,018 --> 00:04:16,025
the absolute value -2 is too

70
00:04:16,025 --> 00:04:19,754
and the only thing the tabs does is
returned the number two

71
00:04:19,979 --> 00:04:22,979
whenever you call it a -2

72
00:04:22,979 --> 00:04:27,770
at the argument that the return value
here's a picture ever

73
00:04:27,077 --> 00:04:32,122
pure function it's a closed pipe goes
from inputs to outputs

74
00:04:33,022 --> 00:04:37,063
powers another pure function a pass into
arguments

75
00:04:37,063 --> 00:04:40,086
I get out one return value

76
00:04:40,086 --> 00:04:43,094
nap non pure functions are completely
different

77
00:04:44,066 --> 00:04:49,102
they taken some input they also have
some output

78
00:04:50,002 --> 00:04:54,002
in this case print as the output none
are the return value

79
00:04:54,002 --> 00:04:58,040
none but in addition instead of being a
closed system

80
00:04:58,004 --> 00:05:02,022
it also has a side effect that's not
coming out here

81
00:05:02,058 --> 00:05:06,367
is that in addition to returning none
prints displays

82
00:05:06,889 --> 00:05:10,180
whatever was passed into it so in this
case for past in

83
00:05:10,018 --> 00:05:14,057
-2 is an argument it displays the output
-2

84
00:05:14,057 --> 00:05:17,144
the return value is not a side effect

85
00:05:18,044 --> 00:05:22,061
is in a value at all it's just something
that happens its behavior

86
00:05:22,061 --> 00:05:25,087
that the consequence of calling the
function

87
00:05:25,087 --> 00:05:28,094
some print is a different thing then abs
are pop

88
00:05:29,057 --> 00:05:32,091
because it has side effects and that's
why we get such

89
00:05:32,091 --> 00:05:37,134
interesting behavior when we messed
print calls within each other

90
00:05:38,034 --> 00:05:41,057
so let's look at that print print one
print

91
00:05:41,057 --> 00:05:44,059
to nested expression again where

92
00:05:44,077 --> 00:05:47,946
what we saw afterwards was 12 and then
none

93
00:05:48,639 --> 00:05:53,050
we can understand what's going on here
and we can do it using an expression

94
00:05:53,005 --> 00:05:54,034
tree

95
00:05:54,034 --> 00:05:57,483
so in order to get the value this

96
00:05:57,789 --> 00:06:02,600
nested call expression we first evaluate
the operator which is a function that

97
00:06:02,006 --> 00:06:03,040
Prince

98
00:06:03,094 --> 00:06:06,913
the first operand is another call
expression

99
00:06:07,759 --> 00:06:10,837
which we evaluate by evaluating its
operator

100
00:06:11,539 --> 00:06:14,627
and its operand now we have the function
print applied to what

101
00:06:15,419 --> 00:06:18,444
when we actually apply print to the
number one

102
00:06:18,669 --> 00:06:24,050
we have a side effect up displaying what
that's where this first one came from

103
00:06:24,005 --> 00:06:28,022
it wise while we were evaluating this
operand sup expression

104
00:06:28,022 --> 00:06:32,781
we gotta watch displayed but it's not
the value of any

105
00:06:32,979 --> 00:06:35,979
it just appeared there because that's
what point does is it makes things

106
00:06:35,979 --> 00:06:38,150
appear

107
00:06:38,015 --> 00:06:42,016
now we gotta value for this expression
as well which was not because that's

108
00:06:42,025 --> 00:06:44,083
what print always returns

109
00:06:44,083 --> 00:06:47,091
next we evaluate this operand

110
00:06:48,063 --> 00:06:51,072
which is itself a call expression

111
00:06:51,072 --> 00:06:54,137
and applying print to the number two
displays the number two

112
00:06:55,037 --> 00:06:59,176
which we see here and the value about
serb expression

113
00:06:59,509 --> 00:07:03,210
is none so now we have print applied to
non

114
00:07:03,021 --> 00:07:06,290
and not when we apply print a nun

115
00:07:06,479 --> 00:07:09,479
a side effect a bat is to display not

116
00:07:09,479 --> 00:07:13,548
which we see on this lot and eventually
we get the value for the whole thing

117
00:07:14,169 --> 00:07:17,410
which is not output here

118
00:07:17,041 --> 00:07:21,050
that none doesn't get displayed be cut

119
00:07:21,005 --> 00:07:25,071
the interactive interpreter for Python
doesn't automatically display:none

120
00:07:26,016 --> 00:07:29,040
when it's the value have an expression
type that the prop

