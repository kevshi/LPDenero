1
00:00:01,439 --> 00:00:04,270
okay onto actual content

2
00:00:04,027 --> 00:00:09,756
and this time I'm armed with a pen

3
00:00:09,999 --> 00:00:11,095
Expressions

4
00:00:11,959 --> 00:00:18,959
Okay, expressions allow us to express computation
in programming languages.

5
00:00:19,069 --> 00:00:22,093
So an expression is something that
describes some piece and computation

6
00:00:22,093 --> 00:00:26,116
and evaluates to a value. Both of these are
important.

7
00:00:27,016 --> 00:00:32,050
So expressions are older than computers.
Mathematics contains all kinds of expressions.

8
00:00:32,005 --> 00:00:36,864
But mathematicians invented tons of different
ways of writing things down.

9
00:00:37,359 --> 00:00:39,455
So, when you want to add in math you put a
plus

10
00:00:40,319 --> 00:00:42,400
sign in between the two things you want to
add.

11
00:00:43,129 --> 00:00:48,030
But division's totally different. You put
something above and something below a horizontal

12
00:00:48,003 --> 00:00:49,101
line.

13
00:00:50,001 --> 00:00:52,078
Square roots involve putting a number in a
little house.

14
00:00:52,078 --> 00:00:58,407
Taking the sine of an angle, you usually write
"sin" instead of "sign"

15
00:00:59,109 --> 00:01:01,162
because apparently the "e" takes too long
to write.

16
00:01:01,639 --> 00:01:03,643
And there are all of these other kinds of
mathematical

17
00:01:03,679 --> 00:01:07,680
notation people have developed over years.

18
00:01:07,068 --> 00:01:13,100
Well it turns out there's just one type of
expression to rule them all, and that's the

19
00:01:14,000 --> 00:01:15,022
function notation.

20
00:01:15,022 --> 00:01:19,060
That one. That's one that computer scientists
use because

21
00:01:19,006 --> 00:01:22,022
it's a generalization over everything else.

22
00:01:22,076 --> 00:01:24,153
so all expression can be expressed using

23
00:01:25,053 --> 00:01:28,097
function call notation like f(x).

24
00:01:28,097 --> 00:01:32,188
Okay, enough slides, let's take a look.

25
00:01:33,088 --> 00:01:38,111
So I'm going to start up Python here,

26
00:01:39,011 --> 00:01:44,089
And I'll show you that what Python does is
it waits for you to type in an expression.

27
00:01:44,089 --> 00:01:49,146
We'll type in 2013, and it'll evaluate that
expression.

28
00:01:50,046 --> 00:01:51,128
Expressions describe computations and they
have values.

29
00:01:52,028 --> 00:01:56,081
And in this case 2013 just evaluates to 2013.

30
00:01:56,081 --> 00:01:58,142
but we can do fancier stuff than that.

31
00:01:59,042 --> 00:02:04,074
We can add together 2000 and 13.

32
00:02:04,074 --> 00:02:07,563
It does addition. We can even add together

33
00:02:08,229 --> 00:02:11,670
multiple things at the same time. Maybe
do a little

34
00:02:11,067 --> 00:02:16,092
multiplication in there, and

35
00:02:16,092 --> 00:02:18,491
super quick Python's going to do the math
for us.

36
00:02:19,319 --> 00:02:24,670
Okay, so it's capable of using what we call
infix operators.

37
00:02:24,067 --> 00:02:26,123
which are things like times and plus

38
00:02:27,023 --> 00:02:29,048
where you put the

39
00:02:29,048 --> 00:02:32,073
arguments to those operators on the left and
the right,

40
00:02:32,073 --> 00:02:34,081
because that's just mathematical convention

41
00:02:35,053 --> 00:02:37,092
but most were going to write in this course

42
00:02:37,092 --> 00:02:40,104
uses what's called function call notation.

43
00:02:41,004 --> 00:02:42,098
So that means writing down the name

44
00:02:42,098 --> 00:02:47,136
function and then the arguments of that function.

45
00:02:48,036 --> 00:02:49,044
what the max
through

46
00:02:49,044 --> 00:02:53,066
for it for what the men

47
00:02:53,066 --> 00:02:55,085
-2 and fifty thousand

48
00:02:55,085 --> 00:02:56,694
-2 what's 100

49
00:02:57,459 --> 00:03:04,459
to 
the second power at one hundred times
100

50
00:03:07,087 --> 00:03:11,095
10 thousand that's a really big number
maybe we can get an even bigger number

51
00:03:12,067 --> 00:03:15,074
I thinking to the one hundred okay

52
00:03:15,074 --> 00:03:19,793
that's what functionalities looks like
in Python for writing down call

53
00:03:20,459 --> 00:03:21,700
expressions

54
00:03:21,007 --> 00:03:25,009
and Python is evaluating them for

55
00:03:25,072 --> 00:03:27,131
now even addition of probation

56
00:03:28,031 --> 00:03:32,080
can be expressed using function call it
Asian

57
00:03:32,008 --> 00:03:39,008
or call expression but to do that we
need you

58
00:03:42,069 --> 00:03:42,618
make sure that we have

59
00:03:43,239 --> 00:03:48,140
access to the functions that represent
addition of cookies

60
00:03:48,014 --> 00:03:49,109
we'll talk more about this line later

61
00:03:50,009 --> 00:03:53,268
but basically at Anmol didn't mean
anything before

62
00:03:53,349 --> 00:03:57,050
you another part of the programming
language we had to go get them

63
00:03:57,005 --> 00:04:01,084
from this module different functions
call operator ok so now i cant at

64
00:04:01,129 --> 00:04:01,151
together

65
00:04:01,349 --> 00:04:06,020
3 to get five we can multiply together

66
00:04:06,002 --> 00:04:10,027
free now three times three 6

67
00:04:10,027 --> 00:04:15,029
with function notation it's particularly
expressive

68
00:04:15,029 --> 00:04:17,090
because you can net

69
00:04:17,009 --> 00:04:20,053
weaken them mall to

70
00:04:21,034 --> 00:04:26,035
of the life together for sixth

71
00:04:26,035 --> 00:04:28,124
what we love playing all that well the
result

72
00:04:29,024 --> 00:04:35,032
banding together 3&5 and we get two
hundred and a

73
00:04:35,032 --> 00:04:40,058
okay let's take a look at exactly what's
going on

74
00:04:40,058 --> 00:04:41,059
or call expression

75
00:04:41,059 --> 00:04:44,155
iPhone look like this here's an example

76
00:04:45,055 --> 00:04:49,141
hoping the college Russian and it has
some parts in those parts have any

77
00:04:50,041 --> 00:04:54,112
and all you those names all the time in
this course season

78
00:04:55,012 --> 00:05:00,041
what comes before the parentheses is
called the operator

79
00:05:00,041 --> 00:05:03,610
what comes within the print is the
separated by commas

80
00:05:03,979 --> 00:05:07,010
are operate operators and operands are

81
00:05:07,001 --> 00:05:09,096
expression month for the whole thing

82
00:05:09,096 --> 00:05:12,155
the college person

83
00:05:13,055 --> 00:05:18,144
you okay this whole thing is the
caller's question

84
00:05:19,044 --> 00:05:25,136
but the thing that underlined are also
expressed

85
00:05:26,036 --> 00:05:30,065
so they evaluate to values that's what
expressions to

86
00:05:30,389 --> 00:05:33,580
now in order to evaluate a whole call
expression

87
00:05:33,058 --> 00:05:37,156
we have a procedure for evaluating that
and it goes like this:

88
00:05:38,056 --> 00:05:42,087
the evaluation procedure for college
persons first evaluate the

89
00:05:42,087 --> 00:05:45,184
operator and the operand some expression

90
00:05:46,084 --> 00:05:51,088
the operator here the operands

91
00:05:52,024 --> 00:05:54,041
those get evaluated to their values

92
00:05:54,041 --> 00:05:59,075
and the operators gonna give us a
function which we're gonna apply

93
00:05:59,075 --> 00:06:02,084
to values in this case

94
00:06:02,759 --> 00:06:06,770
which is that true arguments that Punk

95
00:06:06,077 --> 00:06:09,118
function as at and the two arguments are
made to win three

96
00:06:10,018 --> 00:06:13,097
things we act together

97
00:06:13,259 --> 00:06:16,284
okay that's step one as we get that the
function

98
00:06:16,509 --> 00:06:20,020
forget to in three things we're adding
together and then step 2

99
00:06:20,002 --> 00:06:23,011
is we apply the function the value of
the operators

100
00:06:23,011 --> 00:06:26,052
expression the arguments that are values

101
00:06:26,052 --> 00:06:30,701
of the operands experts ok so

102
00:06:31,169 --> 00:06:35,340
and words

103
00:06:35,034 --> 00:06:37,923
evaluating the name and give the
function

104
00:06:38,229 --> 00:06:41,490
evaluating 2&3 give us the

105
00:06:41,049 --> 00:06:44,084
arguments that were gonna act together
and then the whole thing

106
00:06:44,084 --> 00:06:49,127
evaluates the fuck okay I know that
don't like super slow motion

107
00:06:50,027 --> 00:06:54,032
for figuring out how to add two and
three together but now we turn in a more

108
00:06:54,032 --> 00:06:55,501
complex example

109
00:06:55,789 --> 00:07:01,320
we can just apply this evaluation
procedure over and over again

110
00:07:01,032 --> 00:07:04,035
so this is what we evaluated mall had to

111
00:07:04,035 --> 00:07:07,127
mall 46 that 35 once print these buns a
commons

112
00:07:08,027 --> 00:07:14,061
what's going on here we want to evaluate
this whole call expressed

113
00:07:14,061 --> 00:07:17,085
in order to do that we have to apply the
procedure

114
00:07:17,085 --> 00:07:20,161
for a buyer in college pressure which
means evaluate the operator

115
00:07:21,061 --> 00:07:25,061
active the multiplication function
evaluate the operands

116
00:07:25,061 --> 00:07:28,133
here's the first operands 0 its although
a college freshman

117
00:07:29,033 --> 00:07:33,108
a better apply my rule for evaluating
call expressed

118
00:07:34,008 --> 00:07:37,061
which means I bowed operator I get the
at function

119
00:07:37,061 --> 00:07:40,870
about the operands to evaluate through

120
00:07:41,419 --> 00:07:44,506
and mall for sixth is another call
expressions my pilot same procedure

121
00:07:45,289 --> 00:07:46,180
again

122
00:07:46,018 --> 00:07:49,046
evaluate mall for and 6th to get
multiplication

123
00:07:49,046 --> 00:07:53,062
a four and six which finally gives me a
value 24

124
00:07:53,062 --> 00:08:00,062
okay an hour making Park so here we are

125
00:08:03,001 --> 00:08:06,054
we can now add together to and 24

126
00:08:06,063 --> 00:08:09,472
because that the function and the two
arguments

127
00:08:10,039 --> 00:08:14,560
%uh this college fresh which point we
get twenty-fifth

128
00:08:14,056 --> 00:08:19,058
for twenty think that's something we're
gonna multiplying together with whatever

129
00:08:19,058 --> 00:08:19,155
the value

130
00:08:20,055 --> 00:08:25,544
up adding 3&5 so to evaluate and 35
which is another call expression

131
00:08:26,039 --> 00:08:29,660
we figure out and as a function three
and five yr numbers that we can add

132
00:08:29,066 --> 00:08:29,135
together

133
00:08:30,035 --> 00:08:33,113
and we get multiplying together 26

134
00:08:34,013 --> 00:08:41,013
and aid gives us 200 any

135
00:08:42,002 --> 00:08:45,068
this whole thing I've drawn is called an
expression tree

136
00:08:45,086 --> 00:08:48,164
it's just the diagram a computational
process

137
00:08:49,064 --> 00:08:54,075
that's used in order to evaluate call
expression

138
00:08:54,075 --> 00:08:58,127
the caller's question we evaluated that
big thing at the top

139
00:08:59,027 --> 00:09:06,027
it had an operand Feb expression

140
00:09:07,000 --> 00:09:09,093
and value that operate and

141
00:09:09,093 --> 00:09:12,137
is called an argument function

142
00:09:13,037 --> 00:09:17,038
named by the operator those who know
that P

143
00:09:17,047 --> 00:09:20,080
that operands are expressions

144
00:09:20,008 --> 00:09:24,054
and arguments either

145
00:09:25,026 --> 00:09:27,070
and then eventually we get the value the
whole expression

